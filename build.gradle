
plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.0'
}

group 'io.qameta.allure.examples'
version '1.3'

def allureVersion = "2.14.0"
def junit5Version = "5.9.1"
def cucumberVersion = "7.8.1"



repositories {
    mavenCentral()
}


dependencies {
    implementation("io.qameta.allure:allure-java-commons:$allureVersion")
    implementation("io.qameta.allure:allure-junit5:$allureVersion")

    implementation("org.junit.jupiter:junit-jupiter-api:$junit5Version")
    implementation("org.junit.jupiter:junit-jupiter-engine:$junit5Version")
    implementation("org.junit.jupiter:junit-jupiter-params:$junit5Version")

    implementation 'org.junit.platform:junit-platform-suite-engine:1.9.1'
    implementation 'org.junit.platform:junit-platform-launcher:1.9.1'
    implementation 'org.assertj:assertj-core:3.17.2'

    testImplementation "io.cucumber:cucumber-java:$cucumberVersion"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:$cucumberVersion"

    implementation 'org.seleniumhq.selenium:selenium-java:4.5.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    implementation 'ch.qos.logback:logback-core:1.4.1'
    implementation 'ch.qos.logback:logback-classic:1.4.1'
    implementation 'org.slf4j:slf4j-api:2.0.1'
    implementation 'org.dhatim:fastexcel-reader:0.12.15'
    //implementation 'org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M7'
}

configurations {
    testCompile
}

test {
    ignoreFailures = true
    useJUnitPlatform {

    }

    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
   // systemProperty 'allure.results.directory', "$buildDir/allure-results"
}


loadProperties()

def loadProperties() {
    def environment = hasProperty('env') ? env : 'dev'
    println "Current Environment: " + environment

    def configFile = file('config.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    project.ext.config = config
}

task printProperties {
    //println "Gradle Properties"
    //println "logbackconfigurationFile: $config.resources.logback.configurationFile"
    //println "serverName: $config.serverName"
}
test {
    println "System Properties"
    print "browser "
    println System.getProperty("browser") ? System.getProperty("browser") : 'no browser name'
    print "server  "
    println System.getProperty("serverName") ? System.getProperty("serverName") : 'no server name'
  //  println System.getProperty("serverPort") ? System.getProperty("serverPort") : 'no port'
 //   println System.getProperty("driversPath") ? System.getProperty("driversPath") : 'no path to drivers'
    print "Implicit Wait "
    print System.getProperty("driverDefaultWait") ? System.getProperty("driverDefaultWait") : 'driver default wait'
    println " secs"
    systemProperties = System.properties
}
/*
task generateAllureReport(type: Exec) {
    commandLine 'cmd', '/c', 'allure generate allure-results --clean -o allure-report'
}
test.finalizedBy(generateAllureReport)

task openAllureReport(type: Exec) {
    commandLine 'cmd', '/c', 'allure serve allure-results'
}
*/